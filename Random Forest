# Menghitung jumlah kematian bunuh diri per negara
suicide_by_country = dataset.groupby('NamaNegara')['JumlahKematiansuicide'].sum().sort_values(ascending=False)

# Plot bar chart
plt.figure(figsize=(12, 8))
suicide_by_country.head(10).plot(kind='bar', color='skyblue')
plt.title('Jumlah Kematiansuicide Berdasarkan Negara (Top 10)')
plt.xlabel('Negara')
plt.ylabel('Jumlah Kematiansuicide')
plt.xticks(rotation=45)
plt.show()

# Menghitung jumlah kematian bunuh diri berdasarkan jenis kelamin
suicide_by_gender = dataset.groupby('JenisKelamin')['JumlahKematiansuicide'].sum()

# Plot pie chart
plt.figure(figsize=(7, 7))
suicide_by_gender.plot(kind='pie', autopct='%1.1f%%', colors=['lightcoral', 'lightgreen'], startangle=90, legend=False)
plt.title('Kematian Bunuh Diri Berdasarkan Jenis Kelamin')
plt.ylabel('')
plt.show()


# Plot histogram untuk tingkat kematian per 100K
plt.figure(figsize=(10, 6))
plt.hist(dataset['TingkatKematianPer100K'], bins=20, color='lightblue', edgecolor='black')
plt.title('Distribusi Tingkat Kematian per 100K')
plt.xlabel('Tingkat Kematian per 100K')
plt.ylabel('Frekuensi')
plt.grid(True)
plt.show()

# Box plot untuk hubungan antara GDP dan Jumlah Kematiansuicide
plt.figure(figsize=(12, 8))
sns.boxplot(x=dataset['PDB'], y=dataset['JumlahKematiansuicide'], color='lightgreen')
plt.title('Box Plot: PDB vs. Jumlah Kematiansuicide')
plt.xlabel('PDB')
plt.ylabel('Jumlah Kematiansuicide')
plt.show()

from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql.types import IntegerType
from pyspark.ml.feature import VectorAssembler, Imputer
from pyspark.ml.classification import RandomForestClassifier
from pyspark.ml.evaluation import MulticlassClassificationEvaluator

# Membuat SparkSession
spark = SparkSession.builder.appName("SuicideAnalysis").getOrCreate()

# Mengonversi DataFrame Pandas ke DataFrame Spark
spark_df = spark.createDataFrame(dataset)

# Mendefinisikan Fungsi untuk Membuat Kolom Label 'TingkatKematianPer100K'
def create_label(TingkatKematianPer100K):
    if TingkatKematianPer100K <= 10:
        return 0  # tingkat bunuh diri rendah
    elif TingkatKematianPer100K <= 20:
        return 1  # tingkat bunuh diri sedang
    else:
        return 2  # tingkat bunuh diri tinggi

# Mendaftarkan Fungsi sebagai UDF (User Defined Function)
create_label_udf = F.udf(create_label, returnType=IntegerType())

# Menambahkan Kolom 'label' ke DataFrame Spark
spark_df = spark_df.withColumn("label", create_label_udf(spark_df["TingkatKematianPer100K"]))

# Mendefinisikan Kolom Fitur
feature_columns = ['Populasi', 'PDBPerKepala', 'TingkatKematianPer100K', 'RasioPenyerapanTenagaKerja']

# Membuat Imputer untuk Menangani Nilai NaN
imputer = Imputer(inputCols=feature_columns, outputCols=feature_columns)
imputer_model = imputer.fit(spark_df)
spark_df = imputer_model.transform(spark_df)

# Membuat VectorAssembler
assembler = VectorAssembler(inputCols=feature_columns, outputCol="features")

# Menerapkan VectorAssembler ke DataFrame
spark_df = assembler.transform(spark_df)

# Membagi Data ke dalam Set Latih dan Uji
train_data, test_data = spark_df.randomSplit([0.8, 0.2], seed=1234)

# Mendefinisikan dan Melatih RandomForestClassifier
rf = RandomForestClassifier(labelCol="label", featuresCol="features", numTrees=100)
rf_model = rf.fit(train_data)

# Membuat Prediksi pada Data Uji
rf_predictions = rf_model.transform(test_data)

# Evaluasi Model dengan Akurasi
rf_evaluator = MulticlassClassificationEvaluator(labelCol="label", predictionCol="prediction", metricName="accuracy")
rf_accuracy = rf_evaluator.evaluate(rf_predictions)

print(f"Random Forest Model Accuracy: {rf_accuracy}")

# Evaluasi Model dengan Berbagai Metrik
evaluator_auc = MulticlassClassificationEvaluator(labelCol="label", predictionCol="prediction", metricName="accuracy")  # AUC approximation
evaluator_accuracy = MulticlassClassificationEvaluator(labelCol="label", predictionCol="prediction", metricName="accuracy")
evaluator_f1 = MulticlassClassificationEvaluator(labelCol="label", predictionCol="prediction", metricName="f1")
evaluator_precision = MulticlassClassificationEvaluator(labelCol="label", predictionCol="prediction", metricName="weightedPrecision")
evaluator_recall = MulticlassClassificationEvaluator(labelCol="label", predictionCol="prediction", metricName="weightedRecall")

# Menghitung Setiap Metrik Evaluasi
auc = evaluator_auc.evaluate(rf_predictions)
accuracy = evaluator_accuracy.evaluate(rf_predictions)
f1_score = evaluator_f1.evaluate(rf_predictions)
precision = evaluator_precision.evaluate(rf_predictions)
recall = evaluator_recall.evaluate(rf_predictions)

# Mencetak Hasil Metrik Evaluasi
print(f"AUC (ROC Curve): {auc}")
print(f"Accuracy: {accuracy}")
print(f"F1 Score: {f1_score}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
